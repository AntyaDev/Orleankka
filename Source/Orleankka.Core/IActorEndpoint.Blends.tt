<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\Source\Orleankka.Hardcore\bin\Debug\Orleankka.Hardcore.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Orleankka.Codegen" #>
<#@ output extension=".cs" #>

using System;
using System.Threading.Tasks;

using Orleans;
using Orleans.Concurrency;

namespace Orleankka.Core
{
	namespace Hardcore
    {
        <#
        PushIndent("\t");

        foreach (var decl in ActorEndpointDeclaration.AllPossibleDeclarations)
            GenerateInterface(decl);

        PopIndent();
    #>
    }
}
<#+
    void GenerateInterface(ActorEndpointDeclaration decl)
    {		
        PushIndent("\t");

            WriteLine("namespace " + decl);
            WriteLine("{");
            
            PushIndent("\t");

                WriteLine("/// <summary> ");
                WriteLine("/// FOR INTERNAL USE ONLY!");
                WriteLine("/// </summary>");

                WriteIfNotEmpty(decl.GetInterfaceAttributeString());
                WriteLine("public interface IActorEndpoint : IGrainWithStringKey, IRemindable");
                
                WriteLine("{");
                PushIndent("\t");

                    WriteIfNotEmpty(decl.GetTellMethodAttributesString());
                    WriteLine("Task ReceiveTell(RequestEnvelope envelope);");

                    WriteIfNotEmpty(decl.GetAskMethodAttributeString());
                    WriteLine("Task <ResponseEnvelope> ReceiveAsk(RequestEnvelope envelope);");
                
                PopIndent();
                WriteLine("}");

            PopIndent();

        WriteLine("}");
        WriteLine("");

        PopIndent();
    }

    void WriteIfNotEmpty(string s)    
    {
        if (s != "")
            WriteLine(s);
    }
#>